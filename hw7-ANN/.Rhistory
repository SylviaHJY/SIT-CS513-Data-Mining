rm(list=ls())
filename<-file.choose()
cancer<-read.csv(filename, na.strings=c("?"))
View(cancer)
library(cluster)
cancer <- na.omit(cancer)
cancer_scaled <- scale(cancer[, -which(names(cancer) %in% c("diagnosis"))])
hc <- hclust(dist(data_scaled))
# 8.1 Hierarchical clustering (hclust)
cancer_dist <- dist(cancer_scaled)
hclust_results <- hclust(cancer_dist)
plot(hclust_results)
hclust_2 <- cutree(hclust_results, 2)
table(hclust_2, cancer[, "diagnosis"])
kmeans_2 <- kmeans(cancer_scaled, centers = 2, nstart = 10)
table(kmeans_2$cluster, cancer[, "diagnosis"])
rm(list=ls())
data(iris)
View(iris)
?hclust
?dist
?cutree
iris_dist<-dist(iris[,-5])
hclust_resutls<-hclust(iris_dist)
plot(hclust_resutls)
dev.off()
hclust_3<-cutree(hclust_resutls,3)
table(hclust_3,iris[,5])
kmeans_3<- kmeans(iris[,-5],3,nstart = 10)
kmeans_3$cluster
kmeans_3$centers
table(kmeans_3$cluster,iris[,5])
rm(list=ls())
filename<-file.choose()
cancer<-read.csv(filename, na.strings=c("?"))
View(cancer)
library(cluster)
rm(list=ls())
data(iris)
View(iris)
iris_dist<-dist(iris[,-5])
hclust_resutls<-hclust(iris_dist)
plot(hclust_resutls)
dev.off()
hclust_3<-cutree(hclust_resutls,3)
table(hclust_3,iris[,5])
rm(list=ls())
data(iris)
View(iris)
iris_dist<-dist(iris[,-5])
hclust_resutls<-hclust(iris_dist)
plot(hclust_resutls)
#dev.off()
hclust_3<-cutree(hclust_resutls,3)
table(hclust_3,iris[,5])
kmeans_3<- kmeans(iris[,-5],3,nstart = 10)
kmeans_3$cluster
kmeans_3$centers
table(kmeans_3$cluster,iris[,5])
rm(list=ls())
filename<-file.choose()
cancer<-read.csv(filename, na.strings=c("?"))
View(cancer)
library(cluster)
cancer <- na.omit(cancer)
# Scale the data and remove the diagnosis column
cancer_scaled <- scale(cancer[, -which(names(cancer) %in% c("diagnosis"))])
# 8.1 Hierarchical clustering (hclust)
cancer_dist <- dist(cancer_scaled)
hclust_results <- hclust(cancer_dist)
plot(hclust_results)
hclust_2 <- cutree(hclust_results, 2)
table(hclust_2, cancer[, "diagnosis"])
kmeans_2$centers
rm(list=ls())
filename<-file.choose()
cancer<-read.csv(filename, na.strings=c("?"))
View(cancer)
library(cluster)
cancer <- na.omit(cancer)
# Scale the data and remove the diagnosis column
cancer_scaled <- scale(cancer[, -which(names(cancer) %in% c("diagnosis"))])
cancer_dist <- dist(cancer_scaled)
hclust_results <- hclust(cancer_dist)
plot(hclust_results)
hclust_2 <- cutree(hclust_results, 2)
table(hclust_2, cancer[, "diagnosis"])
kmeans_2 <- kmeans(cancer_scaled, centers = 2, nstart = 10)
table(kmeans_2$cluster, cancer[, "diagnosis"])
kmeans_2$centers
# Function to calculate accuracy
calculate_accuracy <- function(true_labels, predicted_labels) {
# Create a correspondence between clusters and actual diagnosis values
confusion_matrix <- table(predicted_labels, true_labels)
# Rearrange the confusion matrix to match the highest correspondence
confusion_matrix <- confusion_matrix[, order(-colSums(confusion_matrix))]
confusion_matrix <- confusion_matrix[order(-rowSums(confusion_matrix)), ]
# Calculate accuracy
accuracy <- sum(diag(confusion_matrix)) / sum(rowSums(confusion_matrix)) * 100
return(accuracy)
}
# Calculate accuracy for hclust
hclust_accuracy <- calculate_accuracy(cancer[, "diagnosis"], hclust_2)
cat("Accuracy for hclust: ", hclust_accuracy, "%\n")
# Calculate accuracy for k-means
kmeans_accuracy <- calculate_accuracy(cancer[, "diagnosis"], kmeans_2$cluster)
cat("Accuracy for k-means: ", kmeans_accuracy, "%\n")
rm(list=ls())
library(neuralnet)
setwd("/Users/jiayinhuang/SIT-homework/CS/cs513-homework/hw7-ann")
dataSet <- read.csv("wisc_bc_ContinuousVar.csv",na.strings = '?')
View(dataSet)
dataSet$diagnosis <- as.numeric(dataSet$diagnosis == "M")
# Convert the dataset to a data frame with numeric values and remove missing values (NA)
dataSet <- data.frame(lapply(na.omit(dataSet), as.numeric))
# Split the dataset into training and testing sets (70% training, 30% testing)
idx <- sort(sample(nrow(dataSet), as.integer(0.7 * nrow(dataSet))))
training <- dataSet[idx, ]
test <- dataSet[-idx, ]
model <- neuralnet(diagnosis ~ ., training[-1], hidden = 5, threshold = 0.01)
# Plot the neural network
plot(model)
ann <- compute(model, test)
ann
ann_cat <- ifelse(ann$net.result >= 0.5, 1, 0)
length(ann_cat)
length(test$diagnosis)
confusion_matrix <- table(ann_cat, test$diagnosis)
confusion_matrix
rm(list=ls())
