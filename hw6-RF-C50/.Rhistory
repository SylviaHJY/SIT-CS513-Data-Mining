cat("Accuracy: ", accuracy(conf_matrix), "%\n")
# Compute error rate
wrong <- sum(test$Abs_cat != cart_predict)
error_rate <- wrong / length(test$Abs_cat)
cat("Error rate: ", error_rate* 100, "%\n")
# Get precision for Abs_cat = Abs_High
abs_high_precision <- conf_matrix["Abs_High", "Abs_High"] / sum(conf_matrix[, "Abs_High"])
cat("Precision (Abs_cat = Abs_High): ", abs_high_precision* 100, "%\n")
rm(list=ls())
filename <- file.choose()
data <- read.csv(filename, na.strings=c("?"))
View(data)
data <- na.omit(data)
library(rpart)
library(rpart.plot)
library(caret)
# Convert character variables to factor
data$Abs_cat <- as.factor(data$Abs_cat)
# Create training and testing sets
set.seed(222)
idx<-sort(sample(nrow(data),round(.70*nrow(data))))
training<-data[idx,]
test<-data[-idx,]
str(training)
str(test)
# Train CART model
cart_model <- rpart(Abs_cat ~ ., data=training, method="class")
rpart.plot(cart_model)
# Make predictions on test set
cart_predict <- predict(cart_model, test, type="class")
str(cart_predict)
# Compute confusion matrix
conf_matrix <- table(actual=test$Abs_cat,cart_predict)
# Compute accuracy
accuracy <- function (x) {sum(diag(x) / (sum(rowSums(x))) * 100)}
cat("Accuracy: ", accuracy(conf_matrix), "%\n")
# Compute error rate
wrong <- sum(test$Abs_cat != cart_predict)
error_rate <- wrong / length(test$Abs_cat)
cat("Error rate: ", error_rate* 100, "%\n")
# Get precision for Abs_cat = Abs_High
abs_high_precision <- conf_matrix["Abs_High", "Abs_High"] / sum(conf_matrix[, "Abs_High"])
cat("Precision (Abs_cat = Abs_High): ", abs_high_precision* 100, "%\n")
rm(list=ls())
rm(list=ls())
#Load the data
filename <- file.choose()
data <- read.csv(filename, na.strings=c("?"))
View(data)
data <- na.omit(data)
# Scale the data and remove the Abs_cat column
data_scaled <- scale(data[, -which(names(data) %in% c("Abs_cat"))])
data_scaled
library(cluster)
# Hierarchical clustering
hc_dist <- dist(data_cluster_std)
# Hierarchical clustering
hc_dist <- dist(data_scaled)
hc_result <- hclust(hc_dist, method = "complete")
# Plot the dendrogram
plot(hc_result)
# Cut the dendrogram into 3 clusters
hclust_3 <- cutree(hc_result, k = 3)
table(hclust_3, data[, "Abs_cat"])
# K-means clustering
kmeans_3 <- kmeans(data_scaled, centers = 3, nstart = 10)
table(kmeans_3$cluster, data[, "Abs_cat"])
kmeans_3$centers
# Add cluster information to the original data
data$cluster <- kmeans_3$cluster
data$cluster <- as.factor(data$cluster)
# Plot the clusters vs. Abs_cat
library(ggplot2)
ggplot(data, aes(x = Abs_cat, fill = cluster)) +
geom_bar(position = "dodge") +
ggtitle("Clusters vs Abs_cat") +
xlab("Abs_cat") +
ylab("Count")
# Function to calculate accuracy
calculate_accuracy <- function(true_labels, predicted_labels) {
# Create a correspondence between clusters and actual diagnosis values
confusion_matrix <- table(predicted_labels, true_labels)
# Rearrange the confusion matrix to match the highest correspondence
confusion_matrix <- confusion_matrix[, order(-colSums(confusion_matrix))]
confusion_matrix <- confusion_matrix[order(-rowSums(confusion_matrix)), ]
# Calculate accuracy
accuracy <- sum(diag(confusion_matrix)) / sum(rowSums(confusion_matrix)) * 100
return(accuracy)
}
# Calculate accuracy for hclust
hclust_accuracy <- calculate_accuracy(data[, "Abs_cat"], hclust_3)
cat("Accuracy for hclust: ", hclust_accuracy, "%\n")
# Calculate accuracy for k-means
kmeans_accuracy <- calculate_accuracy(data[, "Abs_cat"], kmeans_3$cluster)
cat("Accuracy for k-means: ", kmeans_accuracy, "%\n")
rm(list=ls())
filename <- file.choose()
data <- read.csv(filename, na.strings=c("?"))
View(data)
data <- na.omit(data)
data_scaled <- scale(data[, -which(names(data) %in% c("Abs_cat"))])
library(cluster)
# Hierarchical clustering
hc_dist <- dist(data_scaled)
hc_result <- hclust(hc_dist, method = "complete")
# Plot the dendrogram
plot(hc_result)
# Cut the dendrogram into 3 clusters
hclust_3 <- cutree(hc_result, k = 3)
table(hclust_3, data[, "Abs_cat"])
# Cut the dendrogram into 3 clusters
hclust_3 <- cutree(hc_result, k = 3)
table(hclust_3, data[, "Abs_cat"])
# K-means clustering
kmeans_3 <- kmeans(data_scaled, centers = 3)
table(kmeans_3$cluster, data[, "Abs_cat"])
kmeans_3$centers
# Add cluster information to the original data
data$cluster <- kmeans_3$cluster
data$cluster <- as.factor(data$cluster)
# Plot the clusters vs. Abs_cat
library(ggplot2)
ggplot(data, aes(x = Abs_cat, fill = cluster)) +
geom_bar(position = "dodge") +
ggtitle("Clusters vs Abs_cat") +
xlab("Abs_cat") +
ylab("Count")
# Function to calculate accuracy
calculate_accuracy <- function(true_labels, predicted_labels) {
# Create a correspondence between clusters and actual diagnosis values
confusion_matrix <- table(predicted_labels, true_labels)
# Rearrange the confusion matrix to match the highest correspondence
confusion_matrix <- confusion_matrix[, order(-colSums(confusion_matrix))]
confusion_matrix <- confusion_matrix[order(-rowSums(confusion_matrix)), ]
# Calculate accuracy
accuracy <- sum(diag(confusion_matrix)) / sum(rowSums(confusion_matrix)) * 100
return(accuracy)
}
# Calculate accuracy for hclust
hclust_accuracy <- calculate_accuracy(data[, "Abs_cat"], hclust_3)
cat("Accuracy for hclust: ", hclust_accuracy, "%\n")
# Calculate accuracy for k-means
kmeans_accuracy <- calculate_accuracy(data[, "Abs_cat"], kmeans_3$cluster)
cat("Accuracy for k-means: ", kmeans_accuracy, "%\n")
print(kmeans_3$centers)
table(hclust_3, data[, "Abs_cat"])
centroids <- as.data.frame(kmeans_3$centers)
centroids
ggplot(data, aes(x = Transportation_expense, y = Distance_from_Residence_to_Work, color = cluster)) +
geom_point() +
geom_point(data = centroids, aes(x = Transportation_expense, y = Distance_from_Residence_to_Work), size = 5, shape = 8) +
ggtitle("Centroids of K-means clusters")
rm(list=ls())
filename <- file.choose()
data <- read.csv(filename, na.strings=c("?"))
View(data)
data <- na.omit(data)
# Scale the data and remove the Abs_cat column
data_scaled <- scale(data[, -which(names(data) %in% c("Abs_cat"))])
library(cluster)
# Hierarchical clustering
hc_dist <- dist(data_scaled)
hc_result <- hclust(hc_dist, method = "complete")
# Plot the dendrogram
plot(hc_result)
# Cut the dendrogram into 3 clusters
hclust_3 <- cutree(hc_result, k = 3)
table(hclust_3, data[, "Abs_cat"])
# K-means clustering
kmeans_3 <- kmeans(data_scaled, centers = 3)
table(kmeans_3$cluster, data[, "Abs_cat"])
# Print out the cluster centroids
print(kmeans_3$centers)
table(kmeans_3$cluster, data[, "Abs_cat"])
# Display centroids of K-means clusters
centroids <- as.data.frame(kmeans_3$centers)
centroids
# Add cluster information to the original data
data$cluster <- as.factor(kmeans_3$cluster)
# Plot the clusters vs. Abs_cat
library(ggplot2)
ggplot(data, aes(x = Abs_cat, fill = cluster)) +
geom_bar(position = "dodge") +
ggtitle("Clusters vs Abs_cat") +
xlab("Abs_cat") +
ylab("Count")
# Function to calculate accuracy
calculate_accuracy <- function(true_labels, predicted_labels) {
# Create a correspondence between clusters and actual diagnosis values
confusion_matrix <- table(predicted_labels, true_labels)
# Rearrange the confusion matrix to match the highest correspondence
confusion_matrix <- confusion_matrix[, order(-colSums(confusion_matrix))]
confusion_matrix <- confusion_matrix[order(-rowSums(confusion_matrix)), ]
# Calculate accuracy
accuracy <- sum(diag(confusion_matrix)) / sum(rowSums(confusion_matrix)) * 100
return(accuracy)
}
# Calculate accuracy for hclust
hclust_accuracy <- calculate_accuracy(data[, "Abs_cat"], hclust_3)
cat("Accuracy for hclust: ", hclust_accuracy, "%\n")
# Calculate accuracy for k-means
kmeans_accuracy <- calculate_accuracy(data[, "Abs_cat"], kmeans_3$cluster)
cat("Accuracy for k-means: ", kmeans_accuracy, "%\n")
rm(list=ls())
filename <- file.choose()
data <- read.csv(filename, na.strings=c("?"))
View(data)
data <- na.omit(data)
# Scale the data and remove the Abs_cat column
data_scaled <- scale(data[, -which(names(data) %in% c("Abs_cat"))])
library(cluster)
# Hierarchical clustering
hc_dist <- dist(data_scaled)
hc_result <- hclust(hc_dist)
# Plot the dendrogram
plot(hc_result)
# Cut the dendrogram into 3 clusters
hclust_3 <- cutree(hc_result, k = 3)
table(hclust_3, data[, "Abs_cat"])
# K-means clustering
kmeans_3 <- kmeans(data_scaled, centers = 3,nstart = 10)
table(kmeans_3$cluster, data[, "Abs_cat"])
# Print out the cluster centroids
print(kmeans_3$centers)
# Display centroids of K-means clusters
centroids <- as.data.frame(kmeans_3$centers)
# Add cluster information to the original data
data$cluster <- as.factor(kmeans_3$cluster)
# Plot the clusters vs. Abs_cat
library(ggplot2)
ggplot(data, aes(x = Abs_cat, fill = cluster)) +
geom_bar(position = "dodge") +
ggtitle("Clusters vs Abs_cat") +
xlab("Abs_cat") +
ylab("Count")
rm(list=ls())
filename <- file.choose()
data <- read.csv(filename, na.strings=c("?"))
View(data)
data <- na.omit(data)
data_scaled <- scale(data[, -which(names(data) %in% c("Abs_cat"))])
library(cluster)
# Hierarchical clustering
hc_dist <- dist(data_scaled)
hc_result <- hclust(hc_dist)
# Plot the dendrogram
plot(hc_result)
# Cut the dendrogram into 3 clusters
hclust_3 <- cutree(hc_result, k = 3)
table(hclust_3, data[, "Abs_cat"])
# K-means clustering
kmeans_3 <- kmeans(data_scaled, centers = 3,nstart = 10)
table(kmeans_3$cluster, data[, "Abs_cat"])
# Print out the cluster centroids
print(kmeans_3$centers)
# Display centroids of K-means clusters
centroids <- as.data.frame(kmeans_3$centers)
# Plot the clusters vs. Abs_cat
library(ggplot2)
ggplot(data, aes(x = Abs_cat, fill = cluster)) +
geom_bar(position = "dodge") +
ggtitle("Clusters vs Abs_cat") +
xlab("Abs_cat") +
ylab("Count")
# Add cluster information to the original data
data$cluster <- as.factor(kmeans_3$cluster)
# Plot the clusters vs. Abs_cat
library(ggplot2)
ggplot(data, aes(x = Abs_cat, fill = cluster)) +
geom_bar(position = "dodge") +
ggtitle("Clusters vs Abs_cat") +
xlab("Abs_cat") +
ylab("Count")
# Function to calculate accuracy
calculate_accuracy <- function(true_labels, predicted_labels) {
# Create a correspondence between clusters and actual diagnosis values
confusion_matrix <- table(predicted_labels, true_labels)
# Rearrange the confusion matrix to match the highest correspondence
confusion_matrix <- confusion_matrix[, order(-colSums(confusion_matrix))]
confusion_matrix <- confusion_matrix[order(-rowSums(confusion_matrix)), ]
# Calculate accuracy
accuracy <- sum(diag(confusion_matrix)) / sum(rowSums(confusion_matrix)) * 100
return(accuracy)
}
# Calculate accuracy for hclust
hclust_accuracy <- calculate_accuracy(data[, "Abs_cat"], hclust_3)
cat("Accuracy for hclust: ", hclust_accuracy, "%\n")
# Calculate accuracy for k-means
kmeans_accuracy <- calculate_accuracy(data[, "Abs_cat"], kmeans_3$cluster)
cat("Accuracy for k-means: ", kmeans_accuracy, "%\n")
# Scatter plot of the first two features, colored by cluster
ggplot(data, aes(x = Transportation_expense, y = Distance_from_Residence_to_Work, color = cluster)) +
geom_point() +
ggtitle("Scatter plot of clusters") +
xlab("Transportation Expense") +
ylab("Distance from Residence to Work")
# Install and load the scatterplot3d package
if (!require(scatterplot3d)) {
install.packages("scatterplot3d")
}
library(scatterplot3d)
# Define colors for each cluster
colors <- c("red", "green", "blue")
# Create a 3D scatter plot
scatterplot3d(data$Transportation_expense, data$Distance_from_Residence_to_Work, data$Age,
color = colors[data$cluster], pch = 19,
xlab = "Transportation Expense",
ylab = "Distance from Residence to Work",
zlab = "Age",
main = "3D Scatter Plot of Clusters")
rm(list=ls())
filename <- file.choose()
data <- read.csv(filename, na.strings=c("?"))
View(data)
data <- na.omit(data)
# Scale the data and remove the Abs_cat column
data_scaled <- scale(data[, -which(names(data) %in% c("Abs_cat"))])
library(cluster)
# Hierarchical clustering
hc_dist <- dist(data_scaled)
hc_result <- hclust(hc_dist)
# Plot the dendrogram
plot(hc_result)
# Cut the dendrogram into 3 clusters
hclust_3 <- cutree(hc_result, k = 3)
table(hclust_3, data[, "Abs_cat"])
# K-means clustering
kmeans_3 <- kmeans(data_scaled, centers = 3,nstart = 10)
table(kmeans_3$cluster, data[, "Abs_cat"])
# Print out the cluster centroids
print(kmeans_3$centers)
# Display centroids of K-means clusters
centroids <- as.data.frame(kmeans_3$centers)
centroids
# Add cluster information to the original data
data$cluster <- as.factor(kmeans_3$cluster)
# Plot the clusters vs. Abs_cat
library(ggplot2)
ggplot(data, aes(x = Abs_cat, fill = cluster)) +
geom_bar(position = "dodge") +
ggtitle("Clusters vs Abs_cat") +
xlab("Abs_cat") +
ylab("Count")
# Create a 3D scatter plot
scatterplot3d(data$Transportation_expense, data$Distance_from_Residence_to_Work, data$Age,
color = colors[data$cluster], pch = 19,
xlab = "Transportation Expense",
ylab = "Distance from Residence to Work",
zlab = "Age",
main = "3D Scatter Plot of Clusters")
# Install and load the scatterplot3d package
if (!require(scatterplot3d)) {
install.packages("scatterplot3d")
}
library(scatterplot3d)
# Define colors for each cluster
colors <- c("red", "green", "blue")
# Create a 3D scatter plot
scatterplot3d(data$Transportation_expense, data$Distance_from_Residence_to_Work, data$Age,
color = colors[data$cluster], pch = 19,
xlab = "Transportation Expense",
ylab = "Distance from Residence to Work",
zlab = "Age",
main = "3D Scatter Plot of Clusters")
rm(list=ls())
filename <- file.choose()
data <- read.csv(filename, na.strings=c("?"))
View(data)
data <- na.omit(data)
library(C50)
set.seed(222)
# Convert character variables to factor
data$Trans_expense_cat <- as.factor(data$Trans_expense_cat)
data$Dist_to_work <- as.factor(data$Dist_to_work)
data$Age_cat <- as.factor(data$Age_cat)
data$Abs_cat <- as.factor(data$Abs_cat)
# Create training and testing sets
idx<-sort(sample(nrow(data),round(.70*nrow(data))))
training<-data[idx,]
test<-data[-idx,]
str(training)
str(test)
# Build C5.0 model
C50_class <- C5.0(Abs_cat ~ .,data=training)
summary(C50_class)
plot(C50_class)
# Make predictions
C50_predict <- predict(C50_class, test, type="class")
# Compute confusion matrix
conf_matrix <- table(actual=test$Abs_cat, C50=C50_predict)
str(C50_predict)
levels(C50_predict)
# Compute accuracy
accuracy <- function (x) {sum(diag(x)) / sum(rowSums(x)) * 100}
cat("Accuracy: ", accuracy(conf_matrix), "%\n")
# Compute error rate
wrong <- sum(test$Abs_cat != C50_predict)
error_rate <- wrong / length(test$Abs_cat)
cat("Error rate: ", error_rate* 100, "%\n")
# Get precision for Abs_cat = Abs_High
abs_high_precision <- conf_matrix["Abs_High", "Abs_High"] / sum(conf_matrix[, "Abs_High"])
cat("Precision (Abs_cat = Abs_High): ", abs_high_precision* 100, "%\n")
rm(list=ls())
rm(list=ls())
filename <- file.choose()
data <- read.csv(filename, na.strings=c("?"))
View(data)
data <- na.omit(data)
library(randomForest)
set.seed(123)
# Convert character variables to factor
data$Trans_expense_cat <- as.factor(data$Trans_expense_cat)
data$Dist_to_work <- as.factor(data$Dist_to_work)
data$Age_cat <- as.factor(data$Age_cat)
data$Abs_cat <- as.factor(data$Abs_cat)
# Create training and testing sets
idx<-sort(sample(nrow(data),round(.70*nrow(data))))
training<-data[idx,]
test<-data[-idx,]
str(training)
str(test)
# Build random forest model
rf_model <- randomForest(Abs_cat ~ ., data = training, importance=TRUE, ntree = 500)
importance(rf_model)
varImpPlot(rf_model)
# Make predictions
Prediction <- predict(rf_model, newdata = test)
# Compute confusion matrix
conf_matrix <- table(actual = test$Abs_cat, Prediction)
# Compute accuracy
accuracy <- function (x) {sum(diag(x) / (sum(rowSums(x))) * 100)}
cat("Accuracy: ", accuracy(conf_matrix), "%\n")
# Compute error rate
wrong <- sum(test$Abs_cat != Prediction)
error_rate <- wrong / length(test$Abs_cat)
cat("Error rate: ", error_rate* 100, "%\n")
# Get precision for Abs_cat = Abs_High
abs_high_precision <- conf_matrix["Abs_High", "Abs_High"] / sum(conf_matrix[, "Abs_High"])
cat("Precision (Abs_cat = Abs_High): ", abs_high_precision* 100, "%\n")
rm(list=ls())
rm(list=ls())
filename <- file.choose()
data <- read.csv(filename, na.strings=c("?"))
View(data)
data <- na.omit(data)
# install.packages("ggplot2")
library(rpart)
library(rpart.plot)
library(caret)
# Convert character variables to factor
data$Abs_cat <- as.factor(data$Abs_cat)
# Create training and testing sets
set.seed(222)
idx<-sort(sample(nrow(data),round(.70*nrow(data))))
training<-data[idx,]
test<-data[-idx,]
str(training)
str(test)
# Train CART model
cart_model <- rpart(Abs_cat ~ ., data=training, method="class")
rpart.plot(cart_model)
# Make predictions on test set
cart_predict <- predict(cart_model, test, type="class")
str(cart_predict)
# Compute confusion matrix
conf_matrix <- table(actual=test$Abs_cat,cart_predict)
# Compute accuracy
accuracy <- function (x) {sum(diag(x) / (sum(rowSums(x))) * 100)}
cat("Accuracy: ", accuracy(conf_matrix), "%\n")
# Compute error rate
wrong <- sum(test$Abs_cat != cart_predict)
error_rate <- wrong / length(test$Abs_cat)
cat("Error rate: ", error_rate* 100, "%\n")
# Get precision for Abs_cat = Abs_High
abs_high_precision <- conf_matrix["Abs_High", "Abs_High"] / sum(conf_matrix[, "Abs_High"])
cat("Precision (Abs_cat = Abs_High): ", abs_high_precision* 100, "%\n")
rm(list=ls())
rm(list=ls())
library(RWeka)
filename <- file.choose()
data <- read.csv(filename, na.strings=c("?"))
View(data)
# Convert variables to factors
data$Dist_to_work <- as.factor(data$Dist_to_work)
data$Age_cat <- as.factor(data$Age_cat)
data$Abs_cat <- as.factor(data$Abs_cat)
# Build the model
one_level_model <- J48(Abs_cat ~ ., data = data, control = Weka_control(C = 100, M = 1))
one_level_model <- OneR(Abs_cat ~ ., data = data)
print(one_level_model)
rm(list=ls())
library(RWeka)
filename <- file.choose()
data <- read.csv(filename, na.strings=c("?"))
View(data)
# Convert variables to factors
data$Dist_to_work <- as.factor(data$Dist_to_work)
data$Age_cat <- as.factor(data$Age_cat)
data$Abs_cat <- as.factor(data$Abs_cat)
one_level_model <- OneR(Abs_cat ~ ., data = data)
# Create a data frame to store the rules
rules_df <- data.frame(
Age_cat = c("Age_higher", "Age_Middle_Age", "Age_Very_young", "Age_Young"),
Abs_cat = c("Abs_low", "Abs_low", "Abs_High", "Abs_High")
)
library(writexl)
# Write the data frame to an Excel file
write_xlsx(rules_df, "Desktop/FinalQ6.xlsx")
# Write the data frame to an Excel file in the working directory
write_xlsx(rules_df, paste0(getwd(), "/FinalQ6.xlsx"))
paste0(getwd()
rm(list=ls())
